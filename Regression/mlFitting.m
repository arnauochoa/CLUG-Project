function [Result] = mlFitting(Data, Config)

    N   =   length(Data.Y);

    [Result.MLfit.thetaMean    , ...
     Result.MLfit.muMean       , ...
     Result.MLfit.sigmaMean    , ...
     Result.MLfit.J_historyMean, ...
     Result.MLfit.errorMean    , ...
     Result.MLfit.X_norm]   = gradientDescent(Data.X, Data.Y, Config);
    
    Result.MLfit.fmean = @(x, y)    Result.MLfit.thetaMean(1)       +   ...
                                    Result.MLfit.thetaMean(2).*x    +   ...
                                    Result.MLfit.thetaMean(3).*y    +   ...
                                    Result.MLfit.thetaMean(4).*x.^2 +   ...
                                    Result.MLfit.thetaMean(5).*x.*y +   ...
                                    Result.MLfit.thetaMean(6).*y.^2;
    
    evalFMean   =   feval(Result.MLfit.fmean, Result.MLfit.X_norm(:,1), Result.MLfit.X_norm(:,2)); 
    Result.MLfit.meanRMSE   =   1/N * ((evalFMean - Data.Y)' * (evalFMean - Data.Y));
    
    [Result.MLfit.thetaStd    , ...
     Result.MLfit.muStd       , ...
     Result.MLfit.sigmaStd    , ...
     Result.MLfit.J_historyStd, ...
     Result.MLfit.errorStd    , ...
     ~]   = gradientDescent(Data.X, abs(Result.MLfit.errorMean), Config);
    
    
    Result.MLfit.fstd = @(x, y)     Result.MLfit.thetaStd(1)        +   ...
                                    Result.MLfit.thetaStd(2).*x     +   ...
                                    Result.MLfit.thetaStd(3).*y     +   ...
                                    Result.MLfit.thetaStd(4).*x.^2  +   ...
                                    Result.MLfit.thetaStd(5).*x.*y  +   ...
                                    Result.MLfit.thetaStd(6).*y.^2;
    evalFStd   =   feval(Result.MLfit.fstd, Result.MLfit.X_norm(:,1), Result.MLfit.X_norm(:,2)); 
    Result.MLfit.stdRMSE   =   1/N * ((evalFStd - abs(Result.MLfit.errorMean))' * (evalFStd - abs(Result.MLfit.errorMean)));
    
end